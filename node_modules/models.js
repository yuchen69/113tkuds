// backend/api.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error(err));

const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  passwordHash: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});
const User = mongoose.model('User', UserSchema);

const WheelSchema = new mongoose.Schema({
  name: String,
  userId: mongoose.Schema.Types.ObjectId,
  createdAt: { type: Date, default: Date.now }
});
const Wheel = mongoose.model('Wheel', WheelSchema);

const ItemSchema = new mongoose.Schema({
  wheelId: mongoose.Schema.Types.ObjectId,
  label: String,
  color: String,
  weight: Number
});
const WheelItem = mongoose.model('WheelItem', ItemSchema);

const HistorySchema = new mongoose.Schema({
  wheelId: mongoose.Schema.Types.ObjectId,
  resultLabel: String,
  spunAt: { type: Date, default: Date.now }
});
const SpinHistory = mongoose.model('SpinHistory', HistorySchema);

const authenticate = async (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'No token' });
  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = payload.id;
    next();
  } catch {
    res.status(401).json({ error: 'Invalid token' });
  }
};

// Auth routes
app.post('/api/auth/register', async (req, res) => {
  const { email, password } = req.body;
  const hash = await bcrypt.hash(password, 10);
  const user = new User({ email, passwordHash: hash });
  try {
    await user.save();
    res.status(201).json({ message: 'User created' });
  } catch (err) {
    res.status(400).json({ error: 'Email already exists' });
  }
});

app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || !(await bcrypt.compare(password, user.passwordHash))) {
    return res.status(401).json({ error: 'Invalid credentials' });
  }
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
  res.json({ token });
});

// Wheel CRUD
app.get('/api/wheels', authenticate, async (req, res) => {
  const wheels = await Wheel.find({ userId: req.userId });
  res.json(wheels);
});

app.post('/api/wheels', authenticate, async (req, res) => {
  const { name } = req.body;
  const wheel = new Wheel({ name, userId: req.userId });
  await wheel.save();
  res.status(201).json(wheel);
});

// WheelItem CRUD
app.post('/api/items', authenticate, async (req, res) => {
  const { wheelId, label, color, weight } = req.body;
  const item = new WheelItem({ wheelId, label, color, weight });
  await item.save();
  res.status(201).json(item);
});

app.get('/api/items/:wheelId', authenticate, async (req, res) => {
  const items = await WheelItem.find({ wheelId: req.params.wheelId });
  res.json(items);
});

// Spin and history
app.post('/api/spin', authenticate, async (req, res) => {
  const { wheelId } = req.body;
  const items = await WheelItem.find({ wheelId });
  const totalWeight = items.reduce((sum, item) => sum + item.weight, 0);
  let r = Math.random() * totalWeight;
  for (const item of items) {
    if (r < item.weight) {
      const history = new SpinHistory({ wheelId, resultLabel: item.label });
      await history.save();
      return res.json({ result: item.label });
    }
    r -= item.weight;
  }
});

app.get('/api/history/:wheelId', authenticate, async (req, res) => {
  const history = await SpinHistory.find({ wheelId: req.params.wheelId }).sort({ spunAt: -1 });
  res.json(history);
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
